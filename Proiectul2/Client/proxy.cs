//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModelProiect2020
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ModelProiect2020", IsReference=true)]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string EmailField;
        
        private string FirstNameField;
        
        private string LastNameField;
        
        private string PasswordField;
        
        private string PhoneField;
        
        private int UserIDField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email
        {
            get
            {
                return this.EmailField;
            }
            set
            {
                this.EmailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                return this.FirstNameField;
            }
            set
            {
                this.FirstNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName
        {
            get
            {
                return this.LastNameField;
            }
            set
            {
                this.LastNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone
        {
            get
            {
                return this.PhoneField;
            }
            set
            {
                this.PhoneField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID
        {
            get
            {
                return this.UserIDField;
            }
            set
            {
                this.UserIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Data", Namespace="http://schemas.datacontract.org/2004/07/ModelProiect2020", IsReference=true)]
    public partial class Data : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreationDateField;
        
        private int DataIDField;
        
        private string DateTypeField;
        
        private string EventNameField;
        
        private bool FavoriteDataField;
        
        private string LocationField;
        
        private bool MovedDataField;
        
        private string PathField;
        
        private string PeopleField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate
        {
            get
            {
                return this.CreationDateField;
            }
            set
            {
                this.CreationDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataID
        {
            get
            {
                return this.DataIDField;
            }
            set
            {
                this.DataIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateType
        {
            get
            {
                return this.DateTypeField;
            }
            set
            {
                this.DateTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventName
        {
            get
            {
                return this.EventNameField;
            }
            set
            {
                this.EventNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FavoriteData
        {
            get
            {
                return this.FavoriteDataField;
            }
            set
            {
                this.FavoriteDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location
        {
            get
            {
                return this.LocationField;
            }
            set
            {
                this.LocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MovedData
        {
            get
            {
                return this.MovedDataField;
            }
            set
            {
                this.MovedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string People
        {
            get
            {
                return this.PeopleField;
            }
            set
            {
                this.PeopleField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpecialProperty", Namespace="http://schemas.datacontract.org/2004/07/ModelProiect2020", IsReference=true)]
    public partial class SpecialProperty : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int DataIDField;
        
        private string PropertyDescriptionField;
        
        private int PropertyIDField;
        
        private string PropertyNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataID
        {
            get
            {
                return this.DataIDField;
            }
            set
            {
                this.DataIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyDescription
        {
            get
            {
                return this.PropertyDescriptionField;
            }
            set
            {
                this.PropertyDescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PropertyID
        {
            get
            {
                return this.PropertyIDField;
            }
            set
            {
                this.PropertyIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName
        {
            get
            {
                return this.PropertyNameField;
            }
            set
            {
                this.PropertyNameField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IProject")]
public interface IProject
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/CreateUser", ReplyAction="http://tempuri.org/InterfaceUser/CreateUserResponse")]
    ModelProiect2020.User CreateUser(string firstName, string lastName, string password, string email, string phone);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/CreateUser", ReplyAction="http://tempuri.org/InterfaceUser/CreateUserResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.User> CreateUserAsync(string firstName, string lastName, string password, string email, string phone);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/UpdateUser", ReplyAction="http://tempuri.org/InterfaceUser/UpdateUserResponse")]
    ModelProiect2020.User UpdateUser(int userId, string firstName, string lastName, string password, string email, string phone);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/UpdateUser", ReplyAction="http://tempuri.org/InterfaceUser/UpdateUserResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.User> UpdateUserAsync(int userId, string firstName, string lastName, string password, string email, string phone);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/DeleteUser", ReplyAction="http://tempuri.org/InterfaceUser/DeleteUserResponse")]
    bool DeleteUser(int userId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/DeleteUser", ReplyAction="http://tempuri.org/InterfaceUser/DeleteUserResponse")]
    System.Threading.Tasks.Task<bool> DeleteUserAsync(int userId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetUserById", ReplyAction="http://tempuri.org/InterfaceUser/GetUserByIdResponse")]
    ModelProiect2020.User GetUserById(int userId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetUserById", ReplyAction="http://tempuri.org/InterfaceUser/GetUserByIdResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.User> GetUserByIdAsync(int userId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetAllUsers", ReplyAction="http://tempuri.org/InterfaceUser/GetAllUsersResponse")]
    ModelProiect2020.User[] GetAllUsers();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetAllUsers", ReplyAction="http://tempuri.org/InterfaceUser/GetAllUsersResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.User[]> GetAllUsersAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/CreateData", ReplyAction="http://tempuri.org/InterfaceData/CreateDataResponse")]
    ModelProiect2020.Data CreateData(string dateType, System.DateTime creationDate, string eventName, string people, string location, string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/CreateData", ReplyAction="http://tempuri.org/InterfaceData/CreateDataResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.Data> CreateDataAsync(string dateType, System.DateTime creationDate, string eventName, string people, string location, string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/UpdateData", ReplyAction="http://tempuri.org/InterfaceData/UpdateDataResponse")]
    ModelProiect2020.Data UpdateData(int dataID, string dateType, System.DateTime creationDate, string eventName, string people, string location, string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/UpdateData", ReplyAction="http://tempuri.org/InterfaceData/UpdateDataResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.Data> UpdateDataAsync(int dataID, string dateType, System.DateTime creationDate, string eventName, string people, string location, string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/GetDataById", ReplyAction="http://tempuri.org/InterfaceData/GetDataByIdResponse")]
    ModelProiect2020.Data GetDataById(int dataID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/GetDataById", ReplyAction="http://tempuri.org/InterfaceData/GetDataByIdResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.Data> GetDataByIdAsync(int dataID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/GetAllData", ReplyAction="http://tempuri.org/InterfaceData/GetAllDataResponse")]
    ModelProiect2020.Data[] GetAllData();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/GetAllData", ReplyAction="http://tempuri.org/InterfaceData/GetAllDataResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.Data[]> GetAllDataAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/MoveData", ReplyAction="http://tempuri.org/InterfaceData/MoveDataResponse")]
    ModelProiect2020.Data MoveData(int dataID, string path, bool movedData);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/MoveData", ReplyAction="http://tempuri.org/InterfaceData/MoveDataResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.Data> MoveDataAsync(int dataID, string path, bool movedData);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/FavoritesData", ReplyAction="http://tempuri.org/InterfaceData/FavoritesDataResponse")]
    ModelProiect2020.Data FavoritesData(int dataID, bool favoriteData);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceData/FavoritesData", ReplyAction="http://tempuri.org/InterfaceData/FavoritesDataResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.Data> FavoritesDataAsync(int dataID, bool favoriteData);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSpecialProperties/CreateSpecialProperty", ReplyAction="http://tempuri.org/InterfaceSpecialProperties/CreateSpecialPropertyResponse")]
    ModelProiect2020.SpecialProperty CreateSpecialProperty(string propertyName, string propertyDescription);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSpecialProperties/CreateSpecialProperty", ReplyAction="http://tempuri.org/InterfaceSpecialProperties/CreateSpecialPropertyResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.SpecialProperty> CreateSpecialPropertyAsync(string propertyName, string propertyDescription);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSpecialProperties/DeleteSpecialProperty", ReplyAction="http://tempuri.org/InterfaceSpecialProperties/DeleteSpecialPropertyResponse")]
    bool DeleteSpecialProperty(int propertyID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSpecialProperties/DeleteSpecialProperty", ReplyAction="http://tempuri.org/InterfaceSpecialProperties/DeleteSpecialPropertyResponse")]
    System.Threading.Tasks.Task<bool> DeleteSpecialPropertyAsync(int propertyID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSpecialProperties/UpdateSpecialProperty", ReplyAction="http://tempuri.org/InterfaceSpecialProperties/UpdateSpecialPropertyResponse")]
    ModelProiect2020.SpecialProperty UpdateSpecialProperty(int propertyID, string propertyName, string propertyDescription);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceSpecialProperties/UpdateSpecialProperty", ReplyAction="http://tempuri.org/InterfaceSpecialProperties/UpdateSpecialPropertyResponse")]
    System.Threading.Tasks.Task<ModelProiect2020.SpecialProperty> UpdateSpecialPropertyAsync(int propertyID, string propertyName, string propertyDescription);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IProjectChannel : IProject, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ProjectClient : System.ServiceModel.ClientBase<IProject>, IProject
{
    
    public ProjectClient()
    {
    }
    
    public ProjectClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ProjectClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ProjectClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ProjectClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public ModelProiect2020.User CreateUser(string firstName, string lastName, string password, string email, string phone)
    {
        return base.Channel.CreateUser(firstName, lastName, password, email, phone);
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.User> CreateUserAsync(string firstName, string lastName, string password, string email, string phone)
    {
        return base.Channel.CreateUserAsync(firstName, lastName, password, email, phone);
    }
    
    public ModelProiect2020.User UpdateUser(int userId, string firstName, string lastName, string password, string email, string phone)
    {
        return base.Channel.UpdateUser(userId, firstName, lastName, password, email, phone);
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.User> UpdateUserAsync(int userId, string firstName, string lastName, string password, string email, string phone)
    {
        return base.Channel.UpdateUserAsync(userId, firstName, lastName, password, email, phone);
    }
    
    public bool DeleteUser(int userId)
    {
        return base.Channel.DeleteUser(userId);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteUserAsync(int userId)
    {
        return base.Channel.DeleteUserAsync(userId);
    }
    
    public ModelProiect2020.User GetUserById(int userId)
    {
        return base.Channel.GetUserById(userId);
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.User> GetUserByIdAsync(int userId)
    {
        return base.Channel.GetUserByIdAsync(userId);
    }
    
    public ModelProiect2020.User[] GetAllUsers()
    {
        return base.Channel.GetAllUsers();
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.User[]> GetAllUsersAsync()
    {
        return base.Channel.GetAllUsersAsync();
    }
    
    public ModelProiect2020.Data CreateData(string dateType, System.DateTime creationDate, string eventName, string people, string location, string path)
    {
        return base.Channel.CreateData(dateType, creationDate, eventName, people, location, path);
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.Data> CreateDataAsync(string dateType, System.DateTime creationDate, string eventName, string people, string location, string path)
    {
        return base.Channel.CreateDataAsync(dateType, creationDate, eventName, people, location, path);
    }
    
    public ModelProiect2020.Data UpdateData(int dataID, string dateType, System.DateTime creationDate, string eventName, string people, string location, string path)
    {
        return base.Channel.UpdateData(dataID, dateType, creationDate, eventName, people, location, path);
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.Data> UpdateDataAsync(int dataID, string dateType, System.DateTime creationDate, string eventName, string people, string location, string path)
    {
        return base.Channel.UpdateDataAsync(dataID, dateType, creationDate, eventName, people, location, path);
    }
    
    public ModelProiect2020.Data GetDataById(int dataID)
    {
        return base.Channel.GetDataById(dataID);
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.Data> GetDataByIdAsync(int dataID)
    {
        return base.Channel.GetDataByIdAsync(dataID);
    }
    
    public ModelProiect2020.Data[] GetAllData()
    {
        return base.Channel.GetAllData();
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.Data[]> GetAllDataAsync()
    {
        return base.Channel.GetAllDataAsync();
    }
    
    public ModelProiect2020.Data MoveData(int dataID, string path, bool movedData)
    {
        return base.Channel.MoveData(dataID, path, movedData);
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.Data> MoveDataAsync(int dataID, string path, bool movedData)
    {
        return base.Channel.MoveDataAsync(dataID, path, movedData);
    }
    
    public ModelProiect2020.Data FavoritesData(int dataID, bool favoriteData)
    {
        return base.Channel.FavoritesData(dataID, favoriteData);
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.Data> FavoritesDataAsync(int dataID, bool favoriteData)
    {
        return base.Channel.FavoritesDataAsync(dataID, favoriteData);
    }
    
    public ModelProiect2020.SpecialProperty CreateSpecialProperty(string propertyName, string propertyDescription)
    {
        return base.Channel.CreateSpecialProperty(propertyName, propertyDescription);
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.SpecialProperty> CreateSpecialPropertyAsync(string propertyName, string propertyDescription)
    {
        return base.Channel.CreateSpecialPropertyAsync(propertyName, propertyDescription);
    }
    
    public bool DeleteSpecialProperty(int propertyID)
    {
        return base.Channel.DeleteSpecialProperty(propertyID);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteSpecialPropertyAsync(int propertyID)
    {
        return base.Channel.DeleteSpecialPropertyAsync(propertyID);
    }
    
    public ModelProiect2020.SpecialProperty UpdateSpecialProperty(int propertyID, string propertyName, string propertyDescription)
    {
        return base.Channel.UpdateSpecialProperty(propertyID, propertyName, propertyDescription);
    }
    
    public System.Threading.Tasks.Task<ModelProiect2020.SpecialProperty> UpdateSpecialPropertyAsync(int propertyID, string propertyName, string propertyDescription)
    {
        return base.Channel.UpdateSpecialPropertyAsync(propertyID, propertyName, propertyDescription);
    }
}
